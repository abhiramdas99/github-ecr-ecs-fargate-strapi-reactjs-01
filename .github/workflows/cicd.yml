name: Build and Deploy to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: stage
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Amazon ECR
      env:
        AWS_REGION: ${{ vars.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ vars.ECR_REPOSITORY }}

    - name: Build and push Docker image
      env:
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to ECS
      env:
        AWS_REGION: ${{ vars.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
        ECS_SERVICE: ${{ vars.ECS_SERVICE }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        TASK_FAMILY=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --region $AWS_REGION | jq -r '.services[0].taskDefinition | split("/")[1] | split(":")[0]')
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY --region $AWS_REGION)
        NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REPOSITORY:$IMAGE_TAG" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .status, .revision, .requiresAttributes, .compatibilities)')
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --region $AWS_REGION \
          --cli-input-json "$NEW_TASK_DEFINITION" \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_DEF_ARN --force-new-deployment
